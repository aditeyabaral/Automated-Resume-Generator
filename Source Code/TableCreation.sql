USE DBMS;
EXEC sp_dbcmptlevel 'DBMS', 140;

CREATE TABLE MEMBER
(
    MEMBER_ID VARCHAR(10) NOT NULL PRIMARY KEY,
    PASSWORD VARCHAR(40) NOT NULL,
    NAME VARCHAR(30) NOT NULL,
    EMAIL VARCHAR(40) NOT NULL UNIQUE,
    PHONE VARCHAR(10) NOT NULL UNIQUE,
    ADDRESS VARCHAR (200),
    BIO VARCHAR(100),
    GITHUB VARCHAR(50),
    LINKEDIN VARCHAR(50)
);

CREATE TABLE SCHOOL
(
    SCHOOL_ID VARCHAR(10) NOT NULL PRIMARY KEY,
    LOCATION VARCHAR(100),
    NAME VARCHAR(80) NOT NULL
);

CREATE TABLE SCHOOLING
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SCHOOL_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES SCHOOL(SCHOOL_ID) ON UPDATE CASCADE,
    PASSING_LEVEL INT NOT NULL CHECK (PASSING_LEVEL=10 OR PASSING_LEVEL=12),
    STREAM VARCHAR(10) NOT NULL CHECK (STREAM IN ('SCIENCE','COMMERCE','ARTS','HUMANITIES')),
    PASSING_YEAR INT NOT NULL CHECK (LEN(CONVERT(VARCHAR(10),PASSING_YEAR))=4), 
    SCORE FLOAT NOT NULL CHECK(SCORE>=0 AND SCORE<=100),
    PRIMARY KEY(MEMBER_ID,PASSING_LEVEL)
);

CREATE TABLE DEGREE_INFO
(
    DEGREE_ID VARCHAR(10) NOT NULL PRIMARY KEY,
    TYPE_OF_GRADUATION VARCHAR(30) NOT NULL,
    DEGREE VARCHAR(30) NOT NULL,
    MAJOR VARCHAR(30) NOT NULL
);


CREATE TABLE HIGHER_EDUCATION
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    DEGREE_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES DEGREE_INFO(DEGREE_ID) ON UPDATE CASCADE,
    GPA FLOAT NOT NULL CHECK (GPA>=0 AND GPA<=10),
    UNIVERSITY VARCHAR(40) NOT NULL,
    PRIMARY KEY(MEMBER_ID, DEGREE_ID)
);

CREATE TABLE SKILLS
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SKILL_NAME VARCHAR(30) NOT NULL,
    EXPERIENCE_LEVEL INT CHECK (EXPERIENCE_LEVEL>0 AND EXPERIENCE_LEVEL<=10),
    PRIMARY KEY(MEMBER_ID, SKILL_NAME)
);

CREATE TABLE PROJECTS
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    PROJECT_NAME VARCHAR(30) NOT NULL,
    DESCRIPTION VARCHAR(100),
    PRIMARY KEY(MEMBER_ID, PROJECT_NAME)
);

CREATE TABLE JOB
(
    JOB_ID VARCHAR(10) NOT NULL PRIMARY KEY,
    TITLE VARCHAR(50) NOT NULL,
    LOCATION VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(100),
    EMPLOYER VARCHAR(80) NOT NULL
);

CREATE TABLE EXPERIENCE
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    JOB_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES JOB(JOB_ID) ON UPDATE CASCADE,
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    PRIMARY KEY(MEMBER_ID, JOB_ID) 
);

CREATE TABLE ACCOMPLISHMENTS
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    ACCOMPLISHMENT_NAME VARCHAR(30) NOT NULL,
    DESCRIPTION VARCHAR(100),
    PRIMARY KEY(MEMBER_ID, ACCOMPLISHMENT_NAME)
);

CREATE TABLE CERTIFICATIONS
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CERTIFICATION_URL VARCHAR(30) NOT NULL,
    CERTIFICATE_NAME VARCHAR(100) NOT NULL,
    PRIMARY KEY(MEMBER_ID, CERTIFICATION_URL)
);


GO
CREATE TRIGGER CGPA_TO_PERCENTAGE
ON SCHOOLING
AFTER INSERT
AS SET NOCOUNT ON
BEGIN
    UPDATE SCHOOLING SET SCORE = SCORE*9.5 WHERE (SCORE<=10)
END;


GO
CREATE TRIGGER CHECK_END_AND_START_DATES
ON EXPERIENCE
AFTER INSERT
AS SET NOCOUNT ON
BEGIN
    UPDATE EXPERIENCE SET END_DATE = NULL WHERE (END_DATE <= START_DATE)
END;


/* Test Lossless Join
SELECT 
M.MEMBER_ID, M.NAME, M.ADDRESS, M.PHONE, M.EMAIL,
S.NAME AS SCHOOLNAME, S.LOCATION,
SCH.PASSING_LEVEL, SCH.PASSING_YEAR, SCH.STREAM, SCH.SCORE,
D.DEGREE, D.MAJOR,
HED.UNIVERSITY, HED.GPA,
J.EMPLOYER, J.LOCATION, J.TITLE, J.DESCRIPTION,
E.START_DATE, E.END_DATE,
P.PROJECT_NAME, P.DESCRIPTION,
SK.SKILL_NAME, SK.EXPERIENCE_LEVEL,
A.ACCOMPLISHMENT_NAME, A.DESCRIPTION
FROM MEMBER M
INNER JOIN SCHOOLING SCH ON M.MEMBER_ID = SCH.MEMBER_ID INNER JOIN SCHOOL S ON SCH.SCHOOL_ID = S.SCHOOL_ID
INNER JOIN HIGHER_EDUCATION HED ON M.MEMBER_ID = HED.MEMBER_ID INNER JOIN DEGREE_INFO D ON HED.DEGREE_ID = D.DEGREE_ID
INNER JOIN EXPERIENCE E ON M.MEMBER_ID = E.MEMBER_ID INNER JOIN JOB J ON E.JOB_ID = J.JOB_ID
INNER JOIN PROJECTS P ON M.MEMBER_ID = P.MEMBER_ID
INNER JOIN SKILLS SK ON M.MEMBER_ID = SK.MEMBER_ID
INNER JOIN ACCOMPLISHMENTS A ON M.MEMBER_ID = A.MEMBER_ID;
*/

/*  Query 1
SELECT
M.MEMBER_ID, P.PROJECT_NAME, P.DESCRIPTION 
FROM MEMBER M
INNER JOIN PROJECTS P ON M.MEMBER_ID = P.MEMBER_ID 
INNER JOIN HIGHER_EDUCATION H ON H.MEMBER_ID = M.MEMBER_ID 
WHERE H.GPA > 8.5 AND M.MEMBER_ID IN 
(SELECT MEMBER_ID FROM SCHOOLING WHERE PASSING_LEVEL = 12 AND PASSING_YEAR = 2018)
ORDER BY H.GPA DESC;
*/

/*  Query 2
SELECT 
S.LOCATION, COUNT(S.LOCATION) AS TOTAL_SCHOOLS
FROM 
SCHOOL S
GROUP BY 
S.LOCATION
HAVING 
COUNT(S.LOCATION) >= 1
ORDER BY 
COUNT(S.LOCATION) DESC;
*/

/*  Query 3
SELECT
M.EMAIL
FROM 
MEMBER M
WHERE 
M.MEMBER_ID IN 
(SELECT MEMBER_ID FROM HIGHER_EDUCATION WHERE UNIVERSITY = 'PES UNIVERSITY');
*/

/*  Query 4
SELECT 
J.EMPLOYER, J.LOCATION, J.TITLE, J.DESCRIPTION,
JOB_YEARS = (CASE 
WHEN END_DATE IS NULL THEN DATEDIFF(YEAR, START_DATE, GETDATE())
WHEN END_DATE IS NOT NULL THEN DATEDIFF(YEAR, START_DATE, END_DATE)END)
FROM 
MEMBER M 
INNER JOIN EXPERIENCE E ON M.MEMBER_ID = E.MEMBER_ID
INNER JOIN JOB J ON E.JOB_ID = J.JOB_ID
WHERE M.EMAIL = 'aditeya.baral@gmail.com' AND M.PASSWORD = 'hello123';
*/

/*  Query 5
DECLARE @TEMP_TABLE TABLE
(
    ID VARCHAR(10),
    TOTAL_EXP INT
);

WITH MEMBER_EXPERIENCE(MEMBER_ID, NEW_DUR) AS
(SELECT MEMBER.MEMBER_ID, NEW_DUR = 
(CASE 
WHEN END_DATE IS NULL THEN DATEDIFF(YEAR, START_DATE, GETDATE())
WHEN END_DATE IS NOT NULL THEN DATEDIFF(YEAR, START_DATE, END_DATE)END)
FROM EXPERIENCE E JOIN MEMBER ON E.MEMBER_ID = MEMBER.MEMBER_ID
)
INSERT INTO @TEMP_TABLE select MEMBER_ID, SUM(NEW_DUR) AS TOTAL_EXPERIENCE
FROM MEMBER_EXPERIENCE GROUP BY MEMBER_ID HAVING SUM(NEW_DUR) > 10
SELECT  M.NAME, M.EMAIL, M.PHONE, M.GITHUB, M.LINKEDIN, TOTAL_EXP
FROM @TEMP_TABLE INNER JOIN MEMBER M ON M.MEMBER_ID = ID
*/

/*  Query 6
SELECT D.DEGREE, D.MAJOR, H.MEMBER_ID, H.GPA, H.UNIVERSITY FROM DEGREE_INFO D LEFT OUTER JOIN HIGHER_EDUCATION H ON H.DEGREE_ID = D.DEGREE_ID
WHERE D.TYPE_OF_GRADUATION = 'BACHELOR''S'
*/

/*  Query 7
SELECT J.JOB_ID,J.LOCATION,J.EMPLOYER,E.MEMBER_ID 
FROM JOB J LEFT OUTER JOIN EXPERIENCE E ON J.JOB_ID = E.JOB_ID
WHERE J.EMPLOYER IN ('Google','Microsoft') AND J.TITLE = 'SWE';
*/

/* DELETE TRIGGER
DROP TRIGGER CGPA_TO_PERCENTAGE;
*/

/* DELETES ALL TABLES TO START OVER
DECLARE @Sql NVARCHAR(500) DECLARE @Cursor CURSOR
SET @Cursor = CURSOR FAST_FORWARD FOR
SELECT DISTINCT sql = 'ALTER TABLE [' + tc2.TABLE_SCHEMA + '].[' +  tc2.TABLE_NAME + '] DROP [' + rc1.CONSTRAINT_NAME + '];'
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc1
LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc2 ON tc2.CONSTRAINT_NAME =rc1.CONSTRAINT_NAME
OPEN @Cursor FETCH NEXT FROM @Cursor INTO @Sql
WHILE (@@FETCH_STATUS = 0)
BEGIN
Exec sp_executesql @Sql
FETCH NEXT FROM @Cursor INTO @Sql
END
CLOSE @Cursor DEALLOCATE @Cursor
EXEC sp_MSforeachtable 'DROP TABLE ?'
*/

/* DISPLAYS ALL TABLES
SELECT * FROM MEMBER;
SELECT * FROM SCHOOLING;
SELECT * FROM SCHOOL;
SELECT * FROM DEGREE_INFO;
SELECT * FROM HIGHER_EDUCATION;
SELECT * FROM SKILLS;
SELECT * FROM PROJECTS;
SELECT * FROM JOB;
SELECT * FROM EXPERIENCE;
SELECT * FROM ACCOMPLISHMENTS;
SELECT * FROM CERTIFICATIONS;
*/